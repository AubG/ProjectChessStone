using UnityEngine;
using System.Collections.Generic;

[System.Serializable]
public class BaseSpell
{
	#region Interaction Structures
		
		
	public enum CastType
	{
		/// <summary>
		/// The spell is passive.
		/// </summary>
		Passive,

		/// <summary>
		/// The spell does not require a target and is cast instantly.
		/// </summary>
		Instant,

		/// <summary>
		/// The spell requires a target.
		/// </summary>
		Target
	}
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7

	[System.Serializable]
	public class TargetingData {
		public bool allowCharacters = false;
<<<<<<< HEAD
=======
=======
	
	public struct TargetingData {
		public bool canTargetCharacters;
>>>>>>> origin/master
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7
	}
		
		
	#endregion
		
	#region Data
		
		
	/// <summary>
	/// 16-bit item ID, generated by the system.
	/// Not to be confused with a 32-bit item ID, which actually contains the ID of the database as its prefix.
	/// </summary>
	public int id16;
	
	/// <summary>
	/// Name of this item.
	/// </summary>
	public string name;
	
	/// <summary>
	/// This item's custom description.
	/// </summary>
	public string description;

	/// <summary>
	/// The type of casting used for the spell.
	/// </summary>
	public CastType castType = CastType.Passive;
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7
	
	/// <summary>
	/// The range of the spell in terms of tiles.
	/// </summary>
	public int tileRange;
<<<<<<< HEAD
=======
=======
>>>>>>> origin/master
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7

	/// <summary>
	/// The spell's viable targets data.
	/// </summary>
	public TargetingData targetingData;

	/// <summary>
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7
	/// The cooldown time of the spell in terms of turns.
	/// </summary>
	public int turnCooldown;

	/// <summary>
	/// The cast time of the spell in terms of turns.
	/// </summary>
	public int turnCastTime;

	/// <summary>
<<<<<<< HEAD
=======
=======
>>>>>>> origin/master
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7
	/// A list of ability effects; what happens when the spell is cast.
	/// </summary>
	public List<AbilityEffect> abilityEffects = new List<AbilityEffect>();
	
	/// <summary>
	/// Atlas used for the item's icon.
	/// </summary>
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
	
>>>>>>> origin/master
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7
	public UIAtlas iconAtlas;
	
	/// <summary>
	/// Name of the icon's sprite within the atlas.
	/// </summary>
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
	
>>>>>>> origin/master
>>>>>>> dbc9b9f45ca76778eed14be39ed942af27ad4bd7
	public string iconName = "";
	
	
	#endregion
		
	#region Public Interaction


	public AbilityEffect GetEffect<T>() where T : AbilityEffect, new() {
		for(int i = 0, il = abilityEffects.Count; i < il; ++i) {
			if(abilityEffects[i] is T)
				return abilityEffects[i];
		}
		
		return null;
	}
	
	public void AddEffect<T>() where T : AbilityEffect, new() {
		T newEffect = new T();
		abilityEffects.Add(newEffect);
	}


	#endregion
}