using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Inventory System -- Base Item. Note that it would be incredibly tedious to create all items by hand, Warcraft style.
/// It's a lot more straightforward to create all items to be of the same level as far as stats go, then specify an
/// appropriate level range for the item where it will appear. Effective item stats can then be calculated by lowering
/// the base stats by an appropriate amount. Add a quality modifier, and you have additional variety, Terraria 1.1 style.
/// </summary>
/// 
//

[System.Serializable]
public class InvBaseItem
{
	#region Interaction Types
	
	
	public enum InteractType
	{
		Passive,
		Active,
		Equipment
	}
	
	
	#endregion
	
	#region Data
	
	
	/// <summary>
	/// 16-bit item ID, generated by the system.
	/// Not to be confused with a 32-bit item ID, which actually contains the ID of the database as its prefix.
	/// </summary>
	public int id16;

	/// <summary>
	/// Name of this item.
	/// </summary>
	public string name;

	/// <summary>
	/// This item's custom description.
	/// </summary>
	public string description;
	
	public InteractType interactType = InteractType.Passive;

	/// <summary>
	/// The equipment component if the item. All equipment items must have this component.
	/// </summary>
	public EquipComponent equip;
	
	/// <summary>
	/// The active component of the item. All usable items must have this component.
	/// </summary>
	public ActiveComponent use;

	public List<InvComponent> components = new List<InvComponent>();

	/// <summary>
	/// Atlas used for the item's icon.
	/// </summary>

	public UIAtlas iconAtlas;

	/// <summary>
	/// Name of the icon's sprite within the atlas.
	/// </summary>

	public string iconName = "";
	
	
	#endregion
	
	/*
	public InvComponent GetComponent<T>() {
		for(int i = 0, il = components.Count; i < il; ++i) {
			if(components[i] is T)
				return components[i];
		}
		
		return null;
	}
	
	public void AddComponent<T>() where T : InvComponent, new() {
		T newComponent = new T();
		components.Add(newComponent);
	}*/
}