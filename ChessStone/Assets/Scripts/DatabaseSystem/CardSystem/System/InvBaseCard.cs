using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Inventory System -- Base Item. Note that it would be incredibly tedious to create all items by hand, Warcraft style.
/// It's a lot more straightforward to create all items to be of the same level as far as stats go, then specify an
/// appropriate level range for the item where it will appear. Effective item stats can then be calculated by lowering
/// the base stats by an appropriate amount. Add a quality modifier, and you have additional variety, Terraria 1.1 style.
/// </summary>

[System.Serializable]
public class InvBaseCard
{
	#region Type Data


	public enum Quality
	{
		Normal,
		Cursed,
		Superior,
		Enchanted,
		Legendary,
		_LastDoNotUse,	// Flash export doesn't support Enum.GetNames :(
	}


	#endregion

	public int id;

	/// <summary>
	/// 16-bit item ID, generated by the system.
	/// Not to be confused with a 32-bit item ID, which actually contains the ID of the database as its prefix.
	/// </summary>

	public int id16;

	/// <summary>
	/// Name of this item.
	/// </summary>

	public string name;

	/// <summary>
	/// This item's custom description.
	/// </summary>

	public string description;

	/// <summary>
	/// Quality/rarity of the card.
	/// </summary>

	public Quality quality = Quality.Normal;

	/// <summary>
	/// Minimum and maximum allowed level for this item. When random loot gets generated,
	/// only items within appropriate level should be considered.
	/// </summary>

	public int manaCost = 1;

	/// <summary>
	/// Item's color based on quality. You will likely want to change this to your own colors.
	/// </summary>
	
	public Color color
	{
		get
		{
			Color c = Color.white;
			
			switch (quality)
			{
			case Quality.Cursed:	c = Color.red; break;
			case Quality.Superior:	c = NGUIMath.HexToColor(0x00baffff); break;
			case Quality.Enchanted: c = NGUIMath.HexToColor(0x7376fdff); break;
			case Quality.Legendary: c = NGUIMath.HexToColor(0xff9000ff); break;
			}
			return c;
		}
	}

	/// <summary>
	/// Atlas used for the item's icon.
	/// </summary>

	public UIAtlas iconAtlas;

	/// <summary>
	/// Name of the icon's sprite within the atlas.
	/// </summary>

	public string iconName = "";

	/// <summary>
	/// Every card must have a special spell that is cast upon activation.
	/// The spell's cast type and targeting data must be compatible with the card.
	/// </summary>
	public int spellId;
}